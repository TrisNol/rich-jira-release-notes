{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"rich-jira-release-notes \ud83d\udcc4\ud83e\udd16","text":"<p> Made with Terminalizer</p>"},{"location":"#introduction","title":"Introduction","text":"<p>As of today Jira is not able to export auto-generated release notes with assets such as images (see: Atlassion Support - Create release notes). </p> <p>The CLI provided by this repository is able to do so and serves as a workaround until Atlassian provides this functionality out-of-the-box.</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Install Python 3.12</li> <li> <p>Create a virtual environment: </p> <p><code>python3.12 -m venv ./.venv</code></p> </li> <li> <p>Activate the virtual environment: </p> <p><code>./.venv/scripts/activate</code></p> </li> <li> <p>Install the CLI: </p> <p><code>pip install git+https://github.com/TrisNol/rich-jira-release-notes.git@develop</code></p> </li> <li> <p>Check that the CLI is available: </p> <p><code>rich-jira-release-notes version</code></p> </li> </ol>"},{"location":"#usage","title":"Usage","text":"<ol> <li> <p>Create an <code>.env</code> file of the following structure</p> <pre><code>JIRA_URL=&lt;your_domain&gt;.atlassian.net\nJIRA_USER=&lt;mail of the service/human user providing the token&gt;\nJIRA_TOKEN=&lt;PAT&gt;\n</code></pre> <p>Alternatively, you can provide those values as regular env. variables</p> </li> <li> <p>Create a Jinja template in your project (Example). You will have access to a variable called <code>issues</code> representing a list of objects of type <code>JiraIssue</code>:     <code>python     class JiraIssue(BaseModel):         id: str # Jira internal ticket ID         key: str # Ticket number (&lt;project&gt;-&lt;number&gt;)         type: str # one of: [\"Bug\", \"Story\", \"Task\", \"Epic\", \"Sub-task\"]         fields: dict[str, JiraField] # Ticket fields retrieved</code>     A <code>JiraField</code> exposes an attribute <code>value</code> of different datatypes depending on the <code>type</code> of field selected:</p> <ul> <li><code>JiraFieldType.TEXT</code>: Contains raw text</li> <li><code>JiraFieldType.RICH_TEXT</code>: Contains rich text in Markdown format</li> <li><code>JiraFieldType.CHECKBOX</code>: Contains a list of strings representing the ticked checkboxes of the field</li> </ul> </li> <li> <p>Construct a JQL query fitting your use case; example:</p> <p><code>project = &lt;Jira_Project_Key&gt; AND fixVersion = \"&lt;Release_Version&gt;\"</code></p> <p>Replace placeholders like so:</p> <p><code>project = DEV and fixVersion = \"4.2.0\"</code></p> </li> <li> <p>Determine the fields to export; example:</p> <p><code>Summary, Release Notes</code></p> </li> <li> <p>Run     <code>sh     rich-jira-release-notes generate 'YOUR_JQL_QUERY' fields=\"YOUR_FIELDS\"</code></p> <p>Example:</p> <p><code>rich-jira-release-notes generate 'project = DEV and fixVersion = \"0.0.0\"' \"Summary, Release Notes, Checkboxes\"</code></p> </li> <li> <p>Retrieve release notes from the <code>dist/</code> directory</p> </li> </ol>"},{"location":"#cli-reference","title":"CLI reference","text":"<pre><code>$ rich-jira-release-notes [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>version</code></li> <li><code>generate</code>: Generate release notes</li> </ul>"},{"location":"#rich-jira-release-notes-version","title":"<code>rich-jira-release-notes version</code>","text":"<p>Usage:</p> <pre><code>$ rich-jira-release-notes version [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"#rich-jira-release-notes-generate","title":"<code>rich-jira-release-notes generate</code>","text":"<p>Generate release notes</p> <p>Usage:</p> <pre><code>$ rich-jira-release-notes generate [OPTIONS] JQL_QUERY [FIELDS]\n</code></pre> <p>Arguments:</p> <ul> <li><code>JQL_QUERY</code>: JQL query to search for issues  [required]</li> <li><code>[FIELDS]</code>: Comma separated list of fields to include in the release notes  [default: Summary, Release Notes]</li> </ul> <p>Options:</p> <ul> <li><code>--convert-to-markdown / --no-convert-to-markdown</code>: Convert HTML to Markdown  [default: convert-to-markdown]</li> <li><code>--output-dir TEXT</code>: Output directory  [default: dist]</li> <li><code>--template-file TEXT</code>: Template file to use  [default: ./template.md.jinja]</li> <li><code>--config-file TEXT</code>: Path to JSON configuration file</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#v021-2025-08-09","title":"v0.2.1 (2025-08-09)","text":""},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>deps: Resolve vulnerability   (<code>ddaa665</code>)</li> </ul>"},{"location":"CHANGELOG/#build-system","title":"Build System","text":"<ul> <li>deps: Bump dependencies (#128)   (#128,   <code>92cc86b</code>)</li> </ul>"},{"location":"CHANGELOG/#chores","title":"Chores","text":"<ul> <li>Sync. branches #119 [skip ci]   (<code>14ad0fb</code>)</li> </ul>"},{"location":"CHANGELOG/#v020-2025-06-20","title":"v0.2.0 (2025-06-20)","text":""},{"location":"CHANGELOG/#chores_1","title":"Chores","text":"<ul> <li> <p>Merge branch 'main' into develop [skip ci]   (<code>a7a530f</code>)</p> </li> <li> <p>Trigger main release   (<code>633ce8e</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#v012-2025-01-05","title":"v0.1.2 (2025-01-05)","text":""},{"location":"CHANGELOG/#build-system_1","title":"Build System","text":"<ul> <li>deps: Bump several deps (#116)   (#116,   <code>9e0cce2</code>)</li> </ul>"},{"location":"CHANGELOG/#chores_2","title":"Chores","text":"<ul> <li>Merge 'develop' into 'main' (#18)   (#18,   <code>8469656</code>)</li> </ul>"},{"location":"CHANGELOG/#v020-rc3-2025-06-20","title":"v0.2.0-rc.3 (2025-06-20)","text":""},{"location":"CHANGELOG/#build-system_2","title":"Build System","text":"<ul> <li> <p>deps: Bump pydantic from 2.11.3 to 2.11.5 (#101)   (#101,   <code>9a5eff6</code>)</p> </li> <li> <p>deps: Bump requests from 2.32.3 to 2.32.4 (#108)   (#108,   <code>e8cdbb0</code>)</p> </li> <li> <p>deps: Bump typer from 0.15.2 to 0.16.0 (#105)   (#105,   <code>74f6620</code>)</p> </li> <li> <p>deps-dev: Bump mkdocs-material from 9.6.12 to 9.6.14 (#97)   (#97,   <code>d640848</code>)</p> </li> <li> <p>deps-dev: Bump mkdocstrings-python from 1.16.10 to 1.16.12 (#107)   (#107,   <code>3b51e82</code>)</p> </li> <li> <p>deps-dev: Bump python-semantic-release from 9.21.0 to 9.21.1 (#95)   (#95,   <code>fca3697</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#chores_3","title":"Chores","text":"<ul> <li> <p>deps: Bump deps (#87) (#87,   <code>fdb0c29</code>)</p> </li> <li> <p>deps: Update dependencies (#90)   (#90,   <code>2c9a305</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li>cli: Pass output-dir, template-file and config-file as named parameters rather than argument   (#115) (#115,   <code>41712bb</code>)</li> </ul>"},{"location":"CHANGELOG/#v020-rc2-2025-04-08","title":"v0.2.0-rc.2 (2025-04-08)","text":""},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>core: Resolve some minor issues   (<code>5cf1c40</code>)</li> </ul>"},{"location":"CHANGELOG/#build-system_3","title":"Build System","text":"<ul> <li> <p>deps: Bump dependencies   (<code>697fb7f</code>)</p> </li> <li> <p>deps: Bump python-semantic-release/publish-action (#46)   (#46,   <code>7e39aa5</code>)</p> </li> <li> <p>deps: Bump python-semantic-release/publish-action (#59)   (#59,   <code>d72be12</code>)</p> </li> <li> <p>deps: Bump python-semantic-release/python-semantic-release (#47)   (#47,   <code>6fd4103</code>)</p> </li> <li> <p>deps: Bump python-semantic-release/python-semantic-release (#58)   (#58,   <code>6eb82d1</code>)</p> </li> <li> <p>deps-dev: Bump mkdocs-material from 9.6.3 to 9.6.4 (#50)   (#50,   <code>c9fdba3</code>)</p> </li> <li> <p>deps-dev: Bump mkdocstrings-python from 1.14.6 to 1.15.0 (#49)   (#49,   <code>e9b4a06</code>)</p> </li> <li> <p>deps-dev: Bump python-semantic-release from 9.18.1 to 9.19.1 (#48)   (#48,   <code>deae3cf</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#chores_4","title":"Chores","text":"<ul> <li>deps: Bump dependencies (#42)   (#42,   <code>b6d1fd5</code>)</li> </ul>"},{"location":"CHANGELOG/#v020-rc1-2025-02-04","title":"v0.2.0-rc.1 (2025-02-04)","text":""},{"location":"CHANGELOG/#build-system_4","title":"Build System","text":"<ul> <li> <p>deps: Bump pydantic from 2.10.4 to 2.10.6 (#27)   (#27,   <code>cde1afb</code>)</p> </li> <li> <p>deps: Bump python-semantic-release/publish-action (#23)   (#23,   <code>a34848e</code>)</p> </li> <li> <p>deps: Bump python-semantic-release/python-semantic-release (#24)   (#24,   <code>b42900d</code>)</p> </li> <li> <p>deps-dev: Bump mkdocs-material from 9.5.49 to 9.5.50 (#25)   (#25,   <code>5c60777</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#features_1","title":"Features","text":"<ul> <li>core: Export ticket type   (<code>50a376e</code>)</li> </ul>"},{"location":"CHANGELOG/#v012-rc1-2025-01-05","title":"v0.1.2-rc.1 (2025-01-05)","text":""},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>libs: Enable handling of checkbox fields   (<code>7e79935</code>)</li> </ul>"},{"location":"CHANGELOG/#build-system_5","title":"Build System","text":"<ul> <li> <p>deps: Bump jinja2 from 3.1.4 to 3.1.5 (#14)   (#14,   <code>37eac31</code>)</p> </li> <li> <p>deps: Bump pydantic from 2.10.3 to 2.10.4 (#12)   (#12,   <code>2f9ddfa</code>)</p> </li> <li> <p>deps-dev: Bump mkdocstrings-python from 1.12.2 to 1.13.0 (#16)   (#16,   <code>b656dbe</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#chores_5","title":"Chores","text":"<ul> <li>Merge 'main' into 'develop' [skip ci]   (<code>1129d42</code>)</li> </ul>"},{"location":"CHANGELOG/#v011-2024-12-18","title":"v0.1.1 (2024-12-18)","text":""},{"location":"CHANGELOG/#build-system_6","title":"Build System","text":"<ul> <li> <p>deps: Bump actions/checkout from 3 to 4 (#9)   (#9,   <code>30cd346</code>)</p> </li> <li> <p>deps: Bump actions/setup-python from 4 to 5 (#8)   (#8,   <code>76585f4</code>)</p> </li> <li> <p>deps-dev: Bump mkdocs-material from 9.5.48 to 9.5.49 (#10)   (#10,   <code>c667b64</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#chores_6","title":"Chores","text":"<ul> <li>Merge 'develop' into 'main'   (<code>faf31aa</code>)</li> </ul>"},{"location":"CHANGELOG/#v011-rc1-2024-12-17","title":"v0.1.1-rc.1 (2024-12-17)","text":""},{"location":"CHANGELOG/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>docs: Resolve MkDocs issue   (<code>2c1232f</code>)</li> </ul>"},{"location":"CHANGELOG/#build-system_7","title":"Build System","text":"<ul> <li>Configure remote token for python-semantic-release   (<code>622e60c</code>)</li> </ul>"},{"location":"CHANGELOG/#chores_7","title":"Chores","text":"<ul> <li>Merge branch 'main' into develop   (<code>3f12a5b</code>)</li> </ul>"},{"location":"CHANGELOG/#v010-2024-12-17","title":"v0.1.0 (2024-12-17)","text":""},{"location":"CHANGELOG/#chores_8","title":"Chores","text":"<ul> <li>Merge 'develop' into 'main' #7   (<code>b3b8d52</code>)</li> </ul>"},{"location":"CHANGELOG/#v010-rc1-2024-12-17","title":"v0.1.0-rc.1 (2024-12-17)","text":""},{"location":"CHANGELOG/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li> <p>core: Falsy import   (<code>8f2221a</code>)</p> </li> <li> <p>docs: Remove leftovers   (<code>1b167bc</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#build-system_8","title":"Build System","text":"<ul> <li> <p>Add DevContainer config (#1) (#1,   <code>238665d</code>)</p> </li> <li> <p>Fetch entire repo history in release pipeline   (<code>1f048f7</code>)</p> </li> <li> <p>Give pipeline id-token permission   (<code>8c60510</code>)</p> </li> <li> <p>Give release pipeline write permissions   (<code>0ab7065</code>)</p> </li> <li> <p>Init app (#2) (#2,   <code>e2bb579</code>)</p> </li> <li> <p>Integrate python-semantic-release #6   (<code>7677b9c</code>)</p> </li> <li> <p>Remove repo_dir from semantic_release config   (<code>b2a2114</code>)</p> </li> <li> <p>Resolve branch trigger typo   (<code>2c671a9</code>)</p> </li> <li> <p>Resolve python-semantic-release issue   (<code>8e385e2</code>)</p> </li> <li> <p>docs: MkDocs integration incl. GH workflow   (<code>ba95c1e</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li>Extend docs   (<code>87dabee</code>)</li> </ul>"},{"location":"CHANGELOG/#features_2","title":"Features","text":"<ul> <li>core: Provide main function   (<code>d22c458</code>)</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Tristan Nolde</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>rich_jira_release_notes<ul> <li>core<ul> <li>generator</li> </ul> </li> <li>libs<ul> <li>jira<ul> <li>config</li> <li>jira_api</li> </ul> </li> </ul> </li> <li>main</li> </ul> </li> </ul>"},{"location":"reference/rich_jira_release_notes/","title":"rich_jira_release_notes","text":""},{"location":"reference/rich_jira_release_notes/main/","title":"main","text":""},{"location":"reference/rich_jira_release_notes/main/#rich_jira_release_notes.main.generate","title":"<code>generate(jql_query=typer.Argument(help='JQL query to search for issues'), fields=typer.Argument('Summary, Release Notes', help='Comma separated list of fields to include in the release notes', show_default=True), convert_to_markdown=typer.Option(True, help='Convert HTML to Markdown', show_default=True), output_dir=typer.Option('dist', help='Output directory', show_default=True), template_file=typer.Option('./template.md.jinja', help='Template file to use', show_default=True), config_file=typer.Option(None, help='Path to JSON configuration file', show_default=False))</code>","text":"<p>Generate release notes</p> Source code in <code>src/rich_jira_release_notes/main.py</code> <pre><code>@app.command()\ndef generate(\n    jql_query: str = typer.Argument(help=\"JQL query to search for issues\"),\n    fields: str = typer.Argument(\n        \"Summary, Release Notes\",\n        help=\"Comma separated list of fields to include in the release notes\",\n        show_default=True,\n    ),\n    convert_to_markdown: bool = typer.Option(\n        True, help=\"Convert HTML to Markdown\", show_default=True\n    ),\n    output_dir: str = typer.Option(\"dist\", help=\"Output directory\", show_default=True),\n    template_file: str = typer.Option(\n        \"./template.md.jinja\", help=\"Template file to use\", show_default=True\n    ),\n    config_file: str = typer.Option(\n        None, help=\"Path to JSON configuration file\", show_default=False\n    ),\n):\n    \"\"\"\n    Generate release notes\n    \"\"\"\n    if config_file:\n        api = get_jira_api_from_json(config_file)\n    else:\n        api = get_jira_api_from_env()\n\n    generate_release_notes(\n        api,\n        jql_query,\n        [field.strip() for field in fields.split(\",\")],\n        convert_to_markdown,\n        output_dir,\n        template_file,\n    )\n</code></pre>"},{"location":"reference/rich_jira_release_notes/core/","title":"core","text":""},{"location":"reference/rich_jira_release_notes/core/generator/","title":"generator","text":""},{"location":"reference/rich_jira_release_notes/libs/","title":"libs","text":""},{"location":"reference/rich_jira_release_notes/libs/jira/","title":"jira","text":""},{"location":"reference/rich_jira_release_notes/libs/jira/config/","title":"config","text":""},{"location":"reference/rich_jira_release_notes/libs/jira/config/#rich_jira_release_notes.libs.jira.config.get_jira_api_from_env","title":"<code>get_jira_api_from_env()</code>","text":"<p>Initializes the JiraAPI object using environment variables</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any of the required environment variables are missing</p> <p>Returns:</p> Name Type Description <code>JiraAPI</code> <code>JiraAPI</code> <p>The JiraAPI object</p> Source code in <code>src/rich_jira_release_notes/libs/jira/config.py</code> <pre><code>def get_jira_api_from_env() -&gt; JiraAPI:\n    \"\"\"Initializes the JiraAPI object using environment variables\n\n    Raises:\n        ValueError: If any of the required environment variables are missing\n\n    Returns:\n        JiraAPI: The JiraAPI object\n    \"\"\"\n    load_dotenv(override=True)\n\n    base_url = os.getenv(\"JIRA_URL\")\n    username = os.getenv(\"JIRA_USER\")\n    token = os.getenv(\"JIRA_TOKEN\")\n\n    if any(v is None for v in [base_url, username, token]):\n        raise ValueError(\"Missing environment variables\")\n\n    api = JiraAPI(\n        str(base_url), JiraCredentialsModel(username=str(username), token=str(token))\n    )\n    return api\n</code></pre>"},{"location":"reference/rich_jira_release_notes/libs/jira/config/#rich_jira_release_notes.libs.jira.config.get_jira_api_from_json","title":"<code>get_jira_api_from_json(config_file_path)</code>","text":"<p>Initializes the JiraAPI object using a JSON configuration file</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any of the required variables are missing</p> <p>Returns:</p> Name Type Description <code>JiraAPI</code> <code>JiraAPI</code> <p>The JiraAPI object</p> Source code in <code>src/rich_jira_release_notes/libs/jira/config.py</code> <pre><code>def get_jira_api_from_json(config_file_path: str) -&gt; JiraAPI:\n    \"\"\"Initializes the JiraAPI object using a JSON configuration file\n\n    Raises:\n        ValueError: If any of the required variables are missing\n\n    Returns:\n        JiraAPI: The JiraAPI object\n    \"\"\"\n    with open(config_file_path, \"r\") as f:\n        config = json.load(f)\n\n    base_url = config.get(\"jira\", {}).get(\"base_url\")\n    username = config.get(\"jira\", {}).get(\"username\")\n    token = config.get(\"jira\", {}).get(\"token\")\n\n    if any(v is None for v in [base_url, username, token]):\n        raise RuntimeError(\"Missing environment variables\")\n\n    api = JiraAPI(\n        str(base_url), JiraCredentialsModel(username=str(username), token=str(token))\n    )\n    return api\n</code></pre>"},{"location":"reference/rich_jira_release_notes/libs/jira/jira_api/","title":"jira_api","text":""},{"location":"reference/rich_jira_release_notes/libs/jira/jira_api/#rich_jira_release_notes.libs.jira.jira_api.JiraAPI","title":"<code>JiraAPI</code>","text":"Source code in <code>src/rich_jira_release_notes/libs/jira/jira_api.py</code> <pre><code>class JiraAPI:\n    def __init__(self, base_url: str, credentials: JiraCredentialsModel) -&gt; None:\n        self.base_url = base_url\n        self.credentials = credentials\n\n    def get_issues(self, jql_query: str, fields: list[str]) -&gt; list:\n        \"\"\"Get issues from Jira utilizing https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-search/#api-rest-api-3-search-jql-get\n\n        Args:\n            jql_query (str): JQL query to search for issues\n\n        Returns:\n            list: List of issues\n        \"\"\"\n        url = f\"{self.base_url}/rest/api/3/search/jql\"\n        auth = HTTPBasicAuth(self.credentials.username, self.credentials.token)\n\n        headers = {\"Accept\": \"application/json\"}\n\n        query = {\n            \"jql\": jql_query,\n            \"fields\": \"*all\",\n            \"fieldsByKeys\": \"true\",\n            \"expand\": \"renderedFields,names\",\n        }\n\n        response = requests.request(\n            \"GET\", url, headers=headers, params=query, auth=auth\n        )\n\n        data = json.loads(response.text)\n\n        # Resolve Jira internal field names to clear text representation of desired fields\n        field_maps = {}\n        for field, value in data[\"names\"].items():\n            if value in fields:\n                field_maps[value] = field\n\n        # Extract desired fields from issues\n        result = []\n        for issue in data[\"issues\"]:\n            entry = {\n                \"id\": issue[\"id\"],\n                \"key\": issue[\"key\"],\n                \"type\": issue[\"fields\"][\"issuetype\"][\"name\"],\n                \"fields\": {},\n            }\n            for field_key, field_value in field_maps.items():\n                if (\n                    field_value in issue[\"renderedFields\"]\n                    and issue[\"renderedFields\"][field_value] is not None\n                ):\n                    entry[\"fields\"][field_key] = JiraField(\n                        value=issue[\"renderedFields\"][field_value],\n                        type=JiraFieldType.RICH_TEXT,\n                    )\n                elif (\n                    field_value in issue[\"fields\"]\n                    and issue[\"fields\"][field_value] is not None\n                ):\n                    print(issue[\"fields\"][field_value])\n                    if isinstance(issue[\"fields\"][field_value], list):\n                        entry[\"fields\"][field_key] = JiraField(\n                            value=[\n                                entry[\"value\"] for entry in issue[\"fields\"][field_value]\n                            ],\n                            type=JiraFieldType.CHECKBOX,\n                        )\n                    else:\n                        entry[\"fields\"][field_key] = JiraField(\n                            value=issue[\"fields\"][field_value], type=JiraFieldType.TEXT\n                        )\n            result.append(entry)\n        return [JiraIssue(**issue) for issue in result]\n\n    def download_attachment(self, url: str, output_path: str) -&gt; None:\n        \"\"\"Get attachment specified by id utilizing https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-attachments#api-group-issue-attachments\n\n        Args:\n            id (str): ID of attachment\n            output_dir (str): Output directory to save attachment to\n        \"\"\"\n        url = f\"{self.base_url}{url}\"\n        auth = HTTPBasicAuth(self.credentials.username, self.credentials.token)\n\n        headers = {\"Accept\": \"application/json\"}\n\n        response = requests.request(\"GET\", url, headers=headers, auth=auth)\n\n        with open(output_path, \"wb\") as f:\n            f.write(response.content)\n</code></pre>"},{"location":"reference/rich_jira_release_notes/libs/jira/jira_api/#rich_jira_release_notes.libs.jira.jira_api.JiraAPI.download_attachment","title":"<code>download_attachment(url, output_path)</code>","text":"<p>Get attachment specified by id utilizing https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-attachments#api-group-issue-attachments</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>ID of attachment</p> required <code>output_dir</code> <code>str</code> <p>Output directory to save attachment to</p> required Source code in <code>src/rich_jira_release_notes/libs/jira/jira_api.py</code> <pre><code>def download_attachment(self, url: str, output_path: str) -&gt; None:\n    \"\"\"Get attachment specified by id utilizing https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-attachments#api-group-issue-attachments\n\n    Args:\n        id (str): ID of attachment\n        output_dir (str): Output directory to save attachment to\n    \"\"\"\n    url = f\"{self.base_url}{url}\"\n    auth = HTTPBasicAuth(self.credentials.username, self.credentials.token)\n\n    headers = {\"Accept\": \"application/json\"}\n\n    response = requests.request(\"GET\", url, headers=headers, auth=auth)\n\n    with open(output_path, \"wb\") as f:\n        f.write(response.content)\n</code></pre>"},{"location":"reference/rich_jira_release_notes/libs/jira/jira_api/#rich_jira_release_notes.libs.jira.jira_api.JiraAPI.get_issues","title":"<code>get_issues(jql_query, fields)</code>","text":"<p>Get issues from Jira utilizing https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-search/#api-rest-api-3-search-jql-get</p> <p>Parameters:</p> Name Type Description Default <code>jql_query</code> <code>str</code> <p>JQL query to search for issues</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>List of issues</p> Source code in <code>src/rich_jira_release_notes/libs/jira/jira_api.py</code> <pre><code>def get_issues(self, jql_query: str, fields: list[str]) -&gt; list:\n    \"\"\"Get issues from Jira utilizing https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-search/#api-rest-api-3-search-jql-get\n\n    Args:\n        jql_query (str): JQL query to search for issues\n\n    Returns:\n        list: List of issues\n    \"\"\"\n    url = f\"{self.base_url}/rest/api/3/search/jql\"\n    auth = HTTPBasicAuth(self.credentials.username, self.credentials.token)\n\n    headers = {\"Accept\": \"application/json\"}\n\n    query = {\n        \"jql\": jql_query,\n        \"fields\": \"*all\",\n        \"fieldsByKeys\": \"true\",\n        \"expand\": \"renderedFields,names\",\n    }\n\n    response = requests.request(\n        \"GET\", url, headers=headers, params=query, auth=auth\n    )\n\n    data = json.loads(response.text)\n\n    # Resolve Jira internal field names to clear text representation of desired fields\n    field_maps = {}\n    for field, value in data[\"names\"].items():\n        if value in fields:\n            field_maps[value] = field\n\n    # Extract desired fields from issues\n    result = []\n    for issue in data[\"issues\"]:\n        entry = {\n            \"id\": issue[\"id\"],\n            \"key\": issue[\"key\"],\n            \"type\": issue[\"fields\"][\"issuetype\"][\"name\"],\n            \"fields\": {},\n        }\n        for field_key, field_value in field_maps.items():\n            if (\n                field_value in issue[\"renderedFields\"]\n                and issue[\"renderedFields\"][field_value] is not None\n            ):\n                entry[\"fields\"][field_key] = JiraField(\n                    value=issue[\"renderedFields\"][field_value],\n                    type=JiraFieldType.RICH_TEXT,\n                )\n            elif (\n                field_value in issue[\"fields\"]\n                and issue[\"fields\"][field_value] is not None\n            ):\n                print(issue[\"fields\"][field_value])\n                if isinstance(issue[\"fields\"][field_value], list):\n                    entry[\"fields\"][field_key] = JiraField(\n                        value=[\n                            entry[\"value\"] for entry in issue[\"fields\"][field_value]\n                        ],\n                        type=JiraFieldType.CHECKBOX,\n                    )\n                else:\n                    entry[\"fields\"][field_key] = JiraField(\n                        value=issue[\"fields\"][field_value], type=JiraFieldType.TEXT\n                    )\n        result.append(entry)\n    return [JiraIssue(**issue) for issue in result]\n</code></pre>"}]}